{"ast":null,"code":"import React, { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar headerDefault = 'Warning';\nvar btnTextDefault = 'Close';\nvar errorColor = 'rgb(220, 53, 69)';\nvar warningColor = 'rgb(255, 193, 7)';\nvar successColor = 'rgb(40, 167, 69)';\nvar defaultColor = 'rgb(51, 51, 51)';\n\nvar AlertReact = function AlertReact(_ref) {\n  var _ref$header = _ref.header,\n      header = _ref$header === void 0 ? headerDefault : _ref$header,\n      _ref$btnText = _ref.btnText,\n      btnText = _ref$btnText === void 0 ? btnTextDefault : _ref$btnText,\n      text = _ref.text,\n      show = _ref.show,\n      showBorderBottom = _ref.showBorderBottom,\n      type = _ref.type,\n      color = _ref.color,\n      onClosePress = _ref.onClosePress,\n      _ref$pressCloseOnOuts = _ref.pressCloseOnOutsideClick,\n      pressCloseOnOutsideClick = _ref$pressCloseOnOuts === void 0 ? true : _ref$pressCloseOnOuts,\n      _ref$alertStyles = _ref.alertStyles,\n      alertStyles = _ref$alertStyles === void 0 ? {} : _ref$alertStyles,\n      _ref$headerStyles = _ref.headerStyles,\n      headerStyles = _ref$headerStyles === void 0 ? {} : _ref$headerStyles,\n      _ref$textStyles = _ref.textStyles,\n      textStyles = _ref$textStyles === void 0 ? {} : _ref$textStyles,\n      _ref$buttonStyles = _ref.buttonStyles,\n      buttonStyles = _ref$buttonStyles === void 0 ? {} : _ref$buttonStyles;\n  useEffect(function () {\n    if (pressCloseOnOutsideClick && show) {\n      document.addEventListener('mousedown', handleClickOutsideAlert);\n    }\n\n    return function () {\n      document.removeEventListener('mousedown', handleClickOutsideAlert);\n    };\n  }, [show]);\n\n  var handleClickOutsideAlert = function handleClickOutsideAlert(e) {\n    if (show) {\n      var target = e === null || e === void 0 ? void 0 : e.target;\n\n      if ((target === null || target === void 0 ? void 0 : target.className) === 'backdrop') {\n        onClosePressClick();\n      }\n    }\n  };\n\n  var onClosePressClick = function onClosePressClick() {\n    document.removeEventListener('mousedown', handleClickOutsideAlert);\n    onClosePress();\n  };\n\n  var getColor = function getColor() {\n    if (color) {\n      return color;\n    } else if (type === 'error') return errorColor;else if (type === 'success') return successColor;else if (type === 'warning') return warningColor;else return defaultColor;\n  };\n\n  var colorToUse = getColor();\n\n  var getAlertStyle = function getAlertStyle() {\n    if (showBorderBottom === false) {\n      return alertStyles;\n    } else {\n      return _extends({\n        borderBottom: \"3px solid \" + colorToUse\n      }, alertStyles);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: 'alert-container'\n  }, show ? React.createElement(\"div\", {\n    role: 'alert'\n  }, React.createElement(\"div\", {\n    className: 'backdrop'\n  }), React.createElement(\"div\", {\n    className: 'alert-main',\n    style: getAlertStyle()\n  }, React.createElement(\"h3\", {\n    className: 'alert-header',\n    style: headerStyles\n  }, header), React.createElement(\"p\", {\n    className: 'alert-body',\n    style: textStyles\n  }, text), React.createElement(\"a\", {\n    onClick: function onClick() {\n      return onClosePressClick();\n    },\n    className: 'alert-button',\n    role: 'button',\n    style: _extends({\n      backgroundColor: colorToUse\n    }, buttonStyles),\n    href: '#'\n  }, btnText))) : null);\n};\n\nexport default AlertReact;","map":null,"metadata":{},"sourceType":"module"}